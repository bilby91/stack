/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the UserInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfoResponse{}

// UserInfoResponse struct for UserInfoResponse
type UserInfoResponse struct {
	Email string `json:"email"`
	EmailVerified *bool `json:"email_verified,omitempty"`
	Sub string `json:"sub"`
	Org []OrganizationClaim `json:"org"`
}

// NewUserInfoResponse instantiates a new UserInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfoResponse(email string, sub string, org []OrganizationClaim) *UserInfoResponse {
	this := UserInfoResponse{}
	this.Email = email
	this.Sub = sub
	this.Org = org
	return &this
}

// NewUserInfoResponseWithDefaults instantiates a new UserInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoResponseWithDefaults() *UserInfoResponse {
	this := UserInfoResponse{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserInfoResponse) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserInfoResponse) SetEmail(v string) {
	o.Email = v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *UserInfoResponse) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *UserInfoResponse) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *UserInfoResponse) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetSub returns the Sub field value
func (o *UserInfoResponse) GetSub() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sub
}

// GetSubOk returns a tuple with the Sub field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetSubOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sub, true
}

// SetSub sets field value
func (o *UserInfoResponse) SetSub(v string) {
	o.Sub = v
}

// GetOrg returns the Org field value
func (o *UserInfoResponse) GetOrg() []OrganizationClaim {
	if o == nil {
		var ret []OrganizationClaim
		return ret
	}

	return o.Org
}

// GetOrgOk returns a tuple with the Org field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetOrgOk() ([]OrganizationClaim, bool) {
	if o == nil {
		return nil, false
	}
	return o.Org, true
}

// SetOrg sets field value
func (o *UserInfoResponse) SetOrg(v []OrganizationClaim) {
	o.Org = v
}

func (o UserInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.EmailVerified) {
		toSerialize["email_verified"] = o.EmailVerified
	}
	toSerialize["sub"] = o.Sub
	toSerialize["org"] = o.Org
	return toSerialize, nil
}

type NullableUserInfoResponse struct {
	value *UserInfoResponse
	isSet bool
}

func (v NullableUserInfoResponse) Get() *UserInfoResponse {
	return v.value
}

func (v *NullableUserInfoResponse) Set(val *UserInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfoResponse(val *UserInfoResponse) *NullableUserInfoResponse {
	return &NullableUserInfoResponse{value: val, isSet: true}
}

func (v NullableUserInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


