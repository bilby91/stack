/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the OrganizationClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationClaim{}

// OrganizationClaim struct for OrganizationClaim
type OrganizationClaim struct {
	Id string `json:"id"`
	Name string `json:"name"`
	DisplayName string `json:"displayName"`
	Stacks []StackClaim `json:"stacks"`
}

// NewOrganizationClaim instantiates a new OrganizationClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationClaim(id string, name string, displayName string, stacks []StackClaim) *OrganizationClaim {
	this := OrganizationClaim{}
	this.Id = id
	this.Name = name
	this.DisplayName = displayName
	this.Stacks = stacks
	return &this
}

// NewOrganizationClaimWithDefaults instantiates a new OrganizationClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationClaimWithDefaults() *OrganizationClaim {
	this := OrganizationClaim{}
	return &this
}

// GetId returns the Id field value
func (o *OrganizationClaim) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationClaim) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationClaim) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OrganizationClaim) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationClaim) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationClaim) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *OrganizationClaim) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *OrganizationClaim) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *OrganizationClaim) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetStacks returns the Stacks field value
func (o *OrganizationClaim) GetStacks() []StackClaim {
	if o == nil {
		var ret []StackClaim
		return ret
	}

	return o.Stacks
}

// GetStacksOk returns a tuple with the Stacks field value
// and a boolean to check if the value has been set.
func (o *OrganizationClaim) GetStacksOk() ([]StackClaim, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stacks, true
}

// SetStacks sets field value
func (o *OrganizationClaim) SetStacks(v []StackClaim) {
	o.Stacks = v
}

func (o OrganizationClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["displayName"] = o.DisplayName
	toSerialize["stacks"] = o.Stacks
	return toSerialize, nil
}

type NullableOrganizationClaim struct {
	value *OrganizationClaim
	isSet bool
}

func (v NullableOrganizationClaim) Get() *OrganizationClaim {
	return v.value
}

func (v *NullableOrganizationClaim) Set(val *OrganizationClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationClaim(val *OrganizationClaim) *NullableOrganizationClaim {
	return &NullableOrganizationClaim{value: val, isSet: true}
}

func (v NullableOrganizationClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


