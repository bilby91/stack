// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error)
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	FetchOthers(ctx context.Context, in *FetchOthersRequest, opts ...grpc.CallOption) (*FetchOthersResponse, error)
	FetchPayments(ctx context.Context, in *FetchPaymentsRequest, opts ...grpc.CallOption) (*FetchPaymentsResponse, error)
	FetchAccounts(ctx context.Context, in *FetchAccountsRequest, opts ...grpc.CallOption) (*FetchAccountsResponse, error)
	FetchExternalAccounts(ctx context.Context, in *FetchExternalAccountsRequest, opts ...grpc.CallOption) (*FetchExternalAccountsResponse, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) FetchOthers(ctx context.Context, in *FetchOthersRequest, opts ...grpc.CallOption) (*FetchOthersResponse, error) {
	out := new(FetchOthersResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/FetchOthers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) FetchPayments(ctx context.Context, in *FetchPaymentsRequest, opts ...grpc.CallOption) (*FetchPaymentsResponse, error) {
	out := new(FetchPaymentsResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/FetchPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) FetchAccounts(ctx context.Context, in *FetchAccountsRequest, opts ...grpc.CallOption) (*FetchAccountsResponse, error) {
	out := new(FetchAccountsResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/FetchAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) FetchExternalAccounts(ctx context.Context, in *FetchExternalAccountsRequest, opts ...grpc.CallOption) (*FetchExternalAccountsResponse, error) {
	out := new(FetchExternalAccountsResponse)
	err := c.cc.Invoke(ctx, "/formance.payments.grpc.services.Plugin/FetchExternalAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	Name(context.Context, *emptypb.Empty) (*NameResponse, error)
	Install(context.Context, *InstallRequest) (*InstallResponse, error)
	FetchOthers(context.Context, *FetchOthersRequest) (*FetchOthersResponse, error)
	FetchPayments(context.Context, *FetchPaymentsRequest) (*FetchPaymentsResponse, error)
	FetchAccounts(context.Context, *FetchAccountsRequest) (*FetchAccountsResponse, error)
	FetchExternalAccounts(context.Context, *FetchExternalAccountsRequest) (*FetchExternalAccountsResponse, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) Name(context.Context, *emptypb.Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedPluginServer) Install(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedPluginServer) FetchOthers(context.Context, *FetchOthersRequest) (*FetchOthersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOthers not implemented")
}
func (UnimplementedPluginServer) FetchPayments(context.Context, *FetchPaymentsRequest) (*FetchPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPayments not implemented")
}
func (UnimplementedPluginServer) FetchAccounts(context.Context, *FetchAccountsRequest) (*FetchAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccounts not implemented")
}
func (UnimplementedPluginServer) FetchExternalAccounts(context.Context, *FetchExternalAccountsRequest) (*FetchExternalAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchExternalAccounts not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Name(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_FetchOthers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOthersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).FetchOthers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/FetchOthers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).FetchOthers(ctx, req.(*FetchOthersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_FetchPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).FetchPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/FetchPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).FetchPayments(ctx, req.(*FetchPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_FetchAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).FetchAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/FetchAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).FetchAccounts(ctx, req.(*FetchAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_FetchExternalAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchExternalAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).FetchExternalAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/formance.payments.grpc.services.Plugin/FetchExternalAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).FetchExternalAccounts(ctx, req.(*FetchExternalAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "formance.payments.grpc.services.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Plugin_Name_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _Plugin_Install_Handler,
		},
		{
			MethodName: "FetchOthers",
			Handler:    _Plugin_FetchOthers_Handler,
		},
		{
			MethodName: "FetchPayments",
			Handler:    _Plugin_FetchPayments_Handler,
		},
		{
			MethodName: "FetchAccounts",
			Handler:    _Plugin_FetchAccounts_Handler,
		},
		{
			MethodName: "FetchExternalAccounts",
			Handler:    _Plugin_FetchExternalAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/plugin.proto",
}
