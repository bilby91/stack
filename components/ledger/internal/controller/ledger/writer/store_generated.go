// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination store_generated.go -package writer . Store
//

// Package writer is a generated GoMock package.
package writer

import (
	context "context"
	reflect "reflect"

	ledger "github.com/formancehq/ledger/internal"
	metadata "github.com/formancehq/stack/libs/go-libs/metadata"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockTX is a mock of TX interface.
type MockTX struct {
	ctrl     *gomock.Controller
	recorder *MockTXMockRecorder
}

// MockTXMockRecorder is the mock recorder for MockTX.
type MockTXMockRecorder struct {
	mock *MockTX
}

// NewMockTX creates a new mock instance.
func NewMockTX(ctrl *gomock.Controller) *MockTX {
	mock := &MockTX{ctrl: ctrl}
	mock.recorder = &MockTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTX) EXPECT() *MockTXMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTX) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTXMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTX)(nil).Commit), ctx)
}

// DeleteAccountMetadata mocks base method.
func (m *MockTX) DeleteAccountMetadata(ctx context.Context, address, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountMetadata", ctx, address, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountMetadata indicates an expected call of DeleteAccountMetadata.
func (mr *MockTXMockRecorder) DeleteAccountMetadata(ctx, address, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountMetadata", reflect.TypeOf((*MockTX)(nil).DeleteAccountMetadata), ctx, address, key)
}

// DeleteTransactionMetadata mocks base method.
func (m *MockTX) DeleteTransactionMetadata(ctx context.Context, transactionID int, key string) (*ledger.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionMetadata", ctx, transactionID, key)
	ret0, _ := ret[0].(*ledger.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionMetadata indicates an expected call of DeleteTransactionMetadata.
func (mr *MockTXMockRecorder) DeleteTransactionMetadata(ctx, transactionID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionMetadata", reflect.TypeOf((*MockTX)(nil).DeleteTransactionMetadata), ctx, transactionID, key)
}

// InsertLog mocks base method.
func (m *MockTX) InsertLog(ctx context.Context, log ledger.Log) (*ledger.ChainedLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLog", ctx, log)
	ret0, _ := ret[0].(*ledger.ChainedLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLog indicates an expected call of InsertLog.
func (mr *MockTXMockRecorder) InsertLog(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLog", reflect.TypeOf((*MockTX)(nil).InsertLog), ctx, log)
}

// InsertMoves mocks base method.
func (m *MockTX) InsertMoves(ctx context.Context, move ...ledger.Move) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range move {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMoves", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMoves indicates an expected call of InsertMoves.
func (mr *MockTXMockRecorder) InsertMoves(ctx any, move ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, move...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMoves", reflect.TypeOf((*MockTX)(nil).InsertMoves), varargs...)
}

// InsertTransaction mocks base method.
func (m *MockTX) InsertTransaction(ctx context.Context, transaction ledger.TransactionData) (*ledger.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, transaction)
	ret0, _ := ret[0].(*ledger.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTXMockRecorder) InsertTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTX)(nil).InsertTransaction), ctx, transaction)
}

// LockAccounts mocks base method.
func (m *MockTX) LockAccounts(ctx context.Context, accounts ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range accounts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LockAccounts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccounts indicates an expected call of LockAccounts.
func (mr *MockTXMockRecorder) LockAccounts(ctx any, accounts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, accounts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccounts", reflect.TypeOf((*MockTX)(nil).LockAccounts), varargs...)
}

// RevertTransaction mocks base method.
func (m *MockTX) RevertTransaction(ctx context.Context, id int) (*ledger.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertTransaction", ctx, id)
	ret0, _ := ret[0].(*ledger.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RevertTransaction indicates an expected call of RevertTransaction.
func (mr *MockTXMockRecorder) RevertTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertTransaction", reflect.TypeOf((*MockTX)(nil).RevertTransaction), ctx, id)
}

// Rollback mocks base method.
func (m *MockTX) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTXMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTX)(nil).Rollback), ctx)
}

// UpdateAccountMetadata mocks base method.
func (m_2 *MockTX) UpdateAccountMetadata(ctx context.Context, address string, m metadata.Metadata) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateAccountMetadata", ctx, address, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountMetadata indicates an expected call of UpdateAccountMetadata.
func (mr *MockTXMockRecorder) UpdateAccountMetadata(ctx, address, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountMetadata", reflect.TypeOf((*MockTX)(nil).UpdateAccountMetadata), ctx, address, m)
}

// UpdateTransactionMetadata mocks base method.
func (m_2 *MockTX) UpdateTransactionMetadata(ctx context.Context, transactionID int, m metadata.Metadata) (*ledger.Transaction, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateTransactionMetadata", ctx, transactionID, m)
	ret0, _ := ret[0].(*ledger.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionMetadata indicates an expected call of UpdateTransactionMetadata.
func (mr *MockTXMockRecorder) UpdateTransactionMetadata(ctx, transactionID, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionMetadata", reflect.TypeOf((*MockTX)(nil).UpdateTransactionMetadata), ctx, transactionID, m)
}

// UpsertAccount mocks base method.
func (m *MockTX) UpsertAccount(ctx context.Context, account ledger.Account) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAccount", ctx, account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAccount indicates an expected call of UpsertAccount.
func (mr *MockTXMockRecorder) UpsertAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccount", reflect.TypeOf((*MockTX)(nil).UpsertAccount), ctx, account)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BeginTX mocks base method.
func (m *MockStore) BeginTX(ctx context.Context) (TX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTX", ctx)
	ret0, _ := ret[0].(TX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTX indicates an expected call of BeginTX.
func (mr *MockStoreMockRecorder) BeginTX(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTX", reflect.TypeOf((*MockStore)(nil).BeginTX), ctx)
}

// GetDB mocks base method.
func (m *MockStore) GetDB() bun.IDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(bun.IDB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockStoreMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockStore)(nil).GetDB))
}
