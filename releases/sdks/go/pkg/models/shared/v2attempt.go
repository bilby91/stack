// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/formancehq/formance-sdk-go/v2/pkg/utils"
	"time"
)

type V2AttemptStatus string

const (
	V2AttemptStatusWaiting V2AttemptStatus = "WAITING"
	V2AttemptStatusSuccess V2AttemptStatus = "SUCCESS"
	V2AttemptStatusAbort   V2AttemptStatus = "ABORT"
)

func (e V2AttemptStatus) ToPointer() *V2AttemptStatus {
	return &e
}
func (e *V2AttemptStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WAITING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "ABORT":
		*e = V2AttemptStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V2AttemptStatus: %v", v)
	}
}

type V2Attempt struct {
	Comment        string          `json:"comment"`
	DateOccured    time.Time       `json:"dateOccured"`
	DateStatus     time.Time       `json:"dateStatus"`
	Event          string          `json:"event"`
	HookEndpoint   string          `json:"hookEndpoint"`
	HookID         string          `json:"hookId"`
	HookName       string          `json:"hookName"`
	ID             string          `json:"id"`
	NextRetryAfter time.Time       `json:"nextRetryAfter"`
	Payload        string          `json:"payload"`
	Status         V2AttemptStatus `json:"status"`
	StatusCode     int64           `json:"statusCode"`
}

func (v V2Attempt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2Attempt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2Attempt) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *V2Attempt) GetDateOccured() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateOccured
}

func (o *V2Attempt) GetDateStatus() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateStatus
}

func (o *V2Attempt) GetEvent() string {
	if o == nil {
		return ""
	}
	return o.Event
}

func (o *V2Attempt) GetHookEndpoint() string {
	if o == nil {
		return ""
	}
	return o.HookEndpoint
}

func (o *V2Attempt) GetHookID() string {
	if o == nil {
		return ""
	}
	return o.HookID
}

func (o *V2Attempt) GetHookName() string {
	if o == nil {
		return ""
	}
	return o.HookName
}

func (o *V2Attempt) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V2Attempt) GetNextRetryAfter() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.NextRetryAfter
}

func (o *V2Attempt) GetPayload() string {
	if o == nil {
		return ""
	}
	return o.Payload
}

func (o *V2Attempt) GetStatus() V2AttemptStatus {
	if o == nil {
		return V2AttemptStatus("")
	}
	return o.Status
}

func (o *V2Attempt) GetStatusCode() int64 {
	if o == nil {
		return 0
	}
	return o.StatusCode
}
