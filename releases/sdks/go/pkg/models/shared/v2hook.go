// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/formancehq/formance-sdk-go/v2/pkg/utils"
	"time"
)

type V2HookStatus string

const (
	V2HookStatusEnabled  V2HookStatus = "ENABLED"
	V2HookStatusDisabled V2HookStatus = "DISABLED"
	V2HookStatusDeleted  V2HookStatus = "DELETED"
)

func (e V2HookStatus) ToPointer() *V2HookStatus {
	return &e
}
func (e *V2HookStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DELETED":
		*e = V2HookStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V2HookStatus: %v", v)
	}
}

type V2Hook struct {
	DateCreation time.Time    `json:"dateCreation"`
	DateStatus   time.Time    `json:"dateStatus"`
	Endpoint     string       `json:"endpoint"`
	Events       []string     `json:"events"`
	ID           string       `json:"id"`
	Name         string       `json:"name"`
	Retry        bool         `json:"retry"`
	Secret       string       `json:"secret"`
	Status       V2HookStatus `json:"status"`
}

func (v V2Hook) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2Hook) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2Hook) GetDateCreation() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateCreation
}

func (o *V2Hook) GetDateStatus() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateStatus
}

func (o *V2Hook) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *V2Hook) GetEvents() []string {
	if o == nil {
		return []string{}
	}
	return o.Events
}

func (o *V2Hook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V2Hook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V2Hook) GetRetry() bool {
	if o == nil {
		return false
	}
	return o.Retry
}

func (o *V2Hook) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *V2Hook) GetStatus() V2HookStatus {
	if o == nil {
		return V2HookStatus("")
	}
	return o.Status
}
