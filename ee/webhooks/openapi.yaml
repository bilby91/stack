openapi: 3.0.3
info:
  title: Webhooks
  version: WEBHOOKS_VERSION
paths:
  /configs:
    get:
      summary: Get many configs
      description: Sorted by updated date descending
      operationId: getManyConfigs
      tags:
        - Webhooks
      parameters:
        - name: id
          in: query
          description: Optional filter by Config ID
          required: false
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
        - name: endpoint
          in: query
          description: Optional filter by endpoint URL
          required: false
          schema:
            type: string
            example: https://example.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigsResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Insert a new config
      description: |
        Insert a new webhooks config.

        The endpoint should be a valid https URL and be unique.

        The secret is the endpoint's verification secret.
        If not passed or empty, a secret is automatically generated.
        The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)

        All eventTypes are converted to lower-case when inserted.
      operationId: insertConfig
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUser'
        required: true
      responses:
        "200":
          description: Config created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}:
    delete:
      summary: Delete one config
      description: Delete a webhooks config by ID.
      operationId: deleteConfig
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Config ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: Config successfully deleted.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}/test:
    get:
      summary: Test one config
      description: Test a config by sending a webhook to its endpoint.
      operationId: testConfig
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Config ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttemptResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}/activate:
    put:
      summary: Activate one config
      description: Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
      operationId: activateConfig
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Config ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: Config successfully activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}/deactivate:
    put:
      summary: Deactivate one config
      description: Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
      operationId: deactivateConfig
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Config ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: Config successfully deactivated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/{id}/secret/change:
    put:
      summary: Change the signing secret of a config
      description: |
        Change the signing secret of the endpoint of a webhooks config.

        If not passed or empty, a secret is automatically generated.
        The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
      operationId: changeConfigSecret
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigChangeSecret'
      parameters:
        - name: id
          in: path
          description: Config ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: Secret successfully changed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks:
    get:
      summary: Get Many hooks
      description: List of Available hooks
      operationId: getManyHooks
      tags:
        - Webhooks
      parameters:
        - name: endpoint
          in: query
          description: Optional filter by endpoint URL
          required: false
          schema:
            type: string
            example: https://example.com
        - name: cursor
          in: query
          description: optional cursor filter for pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookCursorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Insert new Hook
      description: Insert new Hook
      operationId: insertHook
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2HookBodyParams'
        required: true
      responses:
        "201":
          description: The hooks successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}:
    get:
      summary: Get one Hook by its ID
      description: Get one Hook by its ID
      operationId: getHook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
          description: The hook
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete one Hook
      description: Set the status of one Hook as "DELETED"
      operationId: deleteHook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
          description: The hooks successfully deleted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/test:
    post:
      summary: Test one Hook
      operationId: testHook
      description: Test one hook by its id
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: string
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AttemptResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/activate:
    put:
      summary: Activate one Hook
      operationId: activateHook
      description: Activate one hook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/deactivate:
    put:
      summary: Deactivate one Hook
      operationId: deactivateHook
      description: Deactivate one hook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/secret:
    put:
      summary: Change the secret of one Hook
      operationId: updateSecretHook
      description: Change the secret of one Hook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  default: ""
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/endpoint:
    put:
      summary: Change the endpoint of one Hook
      operationId: updateEndpointHook
      description: Change the endpoint of one hook
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  type: string
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/hooks/{hookId}/retry:
    put:
      summary: Change the retry attribute of one Hook
      operationId: updateRetryHook
      description: Change the retry attribute
      tags:
        - Webhooks
      parameters:
        - name: hookId
          in: path
          description: Hook ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                retry:
                  type: boolean
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2HookResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/attempts/waiting:
    get:
      summary: Get Waiting Attempts
      description: Get waiting attempts
      operationId: getWaitingAttempts
      tags:
        - Webhooks
      parameters:
        - name: cursor
          in: query
          description: optional cursor filter for pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AttemptCursorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/attempts/aborted:
    get:
      summary: Get aborted Attempts
      operationId: getAbortedAttempts
      description: Get Aborted Attempts
      tags:
        - Webhooks
      parameters:
        - name: cursor
          in: query
          description: optional cursor filter for pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AttemptCursorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/attempts/waiting/flush:
    put:
      summary: Retry all the waiting attempts
      operationId: retryWaitingAttempts
      description: Flush all waiting attempts
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/attempts/waiting/{attemptId}/flush:
    put:
      summary: Retry one waiting Attempt
      operationId: retryWaitingAttempt
      description: Flush one waiting attempt
      tags:
        - Webhooks
      parameters:
        - name: attemptId
          in: path
          description: Attempt ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: OK
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/attempts/waiting/{attemptId}/abort:
    put:
      summary: Abort one waiting attempt
      operationId: abortWaitingAttempt
      description: Abort one waiting attempt
      tags:
        - Webhooks
      parameters:
        - name: attemptId
          in: path
          description: Attempt ID
          required: true
          schema:
            type: string
            example: 4997257d-dfb6-445b-929c-cbe2ab182818
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AttemptResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ConfigUser:
      type: object
      required:
        - endpoint
        - eventTypes
      properties:
        name:
          type: string
          example: customer_payment
        endpoint:
          type: string
          example: https://example.com
        secret:
          type: string
          example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
        eventTypes:
          type: array
          items:
            type: string
            example: TYPE1
          example:
            - TYPE1
            - TYPE2
    ConfigsResponse:
      type: object
      required:
        - cursor
      properties:
        cursor:
          allOf:
            - $ref: '#/components/schemas/Cursor'
            - properties:
                data:
                  items:
                    $ref: '#/components/schemas/WebhooksConfig'
                  type: array
              type: object
              required:
                - data
    Cursor:
      type: object
      required:
        - hasMore
        - data
      properties:
        hasMore:
          type: boolean
          example: false
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebhooksConfig'
    ConfigResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/WebhooksConfig'
    WebhooksConfig:
      properties:
        id:
          type: string
          format: uuid
        endpoint:
          type: string
          example: https://example.com
        secret:
          type: string
          example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
        eventTypes:
          type: array
          items:
            type: string
            example: TYPE1
          example:
            - TYPE1
            - TYPE2
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - endpoint
        - secret
        - eventTypes
        - active
        - createdAt
        - updatedAt
    ConfigChangeSecret:
      type: object
      properties:
        secret:
          type: string
          example: V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3
      required:
        - secret
    AttemptResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Attempt'
    Attempt:
      properties:
        id:
          type: string
          format: uuid
        webhookID:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        config:
          $ref: '#/components/schemas/WebhooksConfig'
        payload:
          type: string
          example: '{"data":"test"}'
        statusCode:
          type: integer
          example: 200
        retryAttempt:
          type: integer
          example: 1
        status:
          type: string
          example: success
        nextRetryAfter:
          type: string
          format: date-time
      required:
        - id
        - webhookID
        - createdAt
        - updatedAt
        - config
        - payload
        - statusCode
        - retryAttempt
        - status
    ErrorResponse:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorsEnum'
        errorMessage:
          type: string
          example: '[VALIDATION] invalid ''cursor'' query param'
        details:
          type: string
          example: https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9
    ErrorsEnum:
      type: string
      enum:
        - INTERNAL_TYPE
        - VALIDATION_TYPE
        - NOT_FOUND
      example: VALIDATION_TYPE
    V2Cursor:
      type: object
      required:
        - pageSize
        - hasMore
        - previous
        - next
        - data
      properties:
        pageSize:
          type: integer
        hasMore:
          type: boolean
        previous:
          type: string
        next:
          type: string
    V2HookCursorResponse:
      type: object
      required:
        - cursor
      properties:
        cursor:
          type: object
          required:
            - pageSize
            - hasMore
            - previous
            - next
            - data
          properties:
            pageSize:
              type: integer
            hasMore:
              type: boolean
            previous:
              type: string
            next:
              type: string
            data:
              type: array
              items:
                $ref: '#/components/schemas/V2Hook'
    V2AttemptCursorResponse:
      type: object
      required:
        - cursor
      properties:
        cursor:
          required:
            - pageSize
            - hasMore
            - previous
            - next
            - data
          properties:
            pageSize:
              type: integer
            hasMore:
              type: boolean
            previous:
              type: string
            next:
              type: string
            data:
              type: array
              items:
                $ref: '#/components/schemas/V2Attempt'
    V2HookResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/V2Hook'
    V2AttemptResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/V2Attempt'
    V2Hook:
      type: object
      required:
        - id
        - name
        - status
        - events
        - endpoint
        - secret
        - retry
        - dateCreation
        - dateStatus
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum:
            - ENABLED
            - DISABLED
            - DELETED
        events:
          type: array
          items:
            type: string
        endpoint:
          type: string
        secret:
          type: string
        retry:
          type: boolean
        dateCreation:
          type: string
          format: date-time
        dateStatus:
          type: string
          format: date-time
    V2Attempt:
      type: object
      required:
        - id
        - hookId
        - hookName
        - hookEndpoint
        - event
        - payload
        - statusCode
        - dateOccured
        - status
        - dateStatus
        - comment
        - nextRetryAfter
      properties:
        id:
          type: string
          format: uuid
        hookId:
          type: string
          format: uuid
        hookName:
          type: string
        hookEndpoint:
          type: string
        event:
          type: string
        payload:
          type: string
        statusCode:
          type: integer
        dateOccured:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - WAITING
            - SUCCESS
            - ABORT
        dateStatus:
          type: string
          format: date-time
        comment:
          type: string
        nextRetryAfter:
          type: string
          format: date-time
    V2HookBodyParams:
      type: object
      required:
        - endpoint
        - events
      properties:
        name:
          type: string
        endpoint:
          type: string
        secret:
          type: string
        events:
          type: array
          items:
            type: string
        retry:
          type: boolean
