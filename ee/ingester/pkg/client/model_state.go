/*
Formance Simple ingester Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ingesterclient

import (
	"encoding/json"
)

// checks if the State type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &State{}

// State struct for State
type State struct {
	Label string `json:"label"`
	Cursor *string `json:"cursor,omitempty"`
	PreviousState *State `json:"previousState,omitempty"`
}

// NewState instantiates a new State object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewState(label string) *State {
	this := State{}
	this.Label = label
	return &this
}

// NewStateWithDefaults instantiates a new State object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateWithDefaults() *State {
	this := State{}
	return &this
}

// GetLabel returns the Label field value
func (o *State) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *State) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *State) SetLabel(v string) {
	o.Label = v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *State) GetCursor() string {
	if o == nil || IsNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *State) GetCursorOk() (*string, bool) {
	if o == nil || IsNil(o.Cursor) {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *State) HasCursor() bool {
	if o != nil && !IsNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *State) SetCursor(v string) {
	o.Cursor = &v
}

// GetPreviousState returns the PreviousState field value if set, zero value otherwise.
func (o *State) GetPreviousState() State {
	if o == nil || IsNil(o.PreviousState) {
		var ret State
		return ret
	}
	return *o.PreviousState
}

// GetPreviousStateOk returns a tuple with the PreviousState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *State) GetPreviousStateOk() (*State, bool) {
	if o == nil || IsNil(o.PreviousState) {
		return nil, false
	}
	return o.PreviousState, true
}

// HasPreviousState returns a boolean if a field has been set.
func (o *State) HasPreviousState() bool {
	if o != nil && !IsNil(o.PreviousState) {
		return true
	}

	return false
}

// SetPreviousState gets a reference to the given State and assigns it to the PreviousState field.
func (o *State) SetPreviousState(v State) {
	o.PreviousState = &v
}

func (o State) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o State) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	if !IsNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	if !IsNil(o.PreviousState) {
		toSerialize["previousState"] = o.PreviousState
	}
	return toSerialize, nil
}

type NullableState struct {
	value *State
	isSet bool
}

func (v NullableState) Get() *State {
	return v.value
}

func (v *NullableState) Set(val *State) {
	v.value = val
	v.isSet = true
}

func (v NullableState) IsSet() bool {
	return v.isSet
}

func (v *NullableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableState(val *State) *NullableState {
	return &NullableState{value: val, isSet: true}
}

func (v NullableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


