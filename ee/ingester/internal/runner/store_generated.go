// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination store_generated.go -package runner . Store
//

// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	reflect "reflect"

	ingester "github.com/formancehq/stack/ee/ingester/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ListEnabledPipelines mocks base method.
func (m *MockStore) ListEnabledPipelines(ctx context.Context) ([]ingester.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledPipelines", ctx)
	ret0, _ := ret[0].([]ingester.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledPipelines indicates an expected call of ListEnabledPipelines.
func (mr *MockStoreMockRecorder) ListEnabledPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledPipelines", reflect.TypeOf((*MockStore)(nil).ListEnabledPipelines), ctx)
}

// StoreState mocks base method.
func (m *MockStore) StoreState(ctx context.Context, id string, state ingester.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", ctx, id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState.
func (mr *MockStoreMockRecorder) StoreState(ctx, id, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockStore)(nil).StoreState), ctx, id, state)
}
