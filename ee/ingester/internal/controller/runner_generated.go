// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go
//
// Generated by this command:
//
//	mockgen -source runner.go -destination runner_generated.go -package controller . Runner
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	ingester "github.com/formancehq/stack/ee/ingester/internal"
	runner "github.com/formancehq/stack/ee/ingester/internal/runner"
	gomock "go.uber.org/mock/gomock"
)

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// GetActiveState mocks base method.
func (m *MockPipeline) GetActiveState() *runner.Signal[ingester.State] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveState")
	ret0, _ := ret[0].(*runner.Signal[ingester.State])
	return ret0
}

// GetActiveState indicates an expected call of GetActiveState.
func (mr *MockPipelineMockRecorder) GetActiveState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveState", reflect.TypeOf((*MockPipeline)(nil).GetActiveState))
}

// Pause mocks base method.
func (m *MockPipeline) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockPipelineMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPipeline)(nil).Pause))
}

// Reset mocks base method.
func (m *MockPipeline) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockPipelineMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPipeline)(nil).Reset))
}

// Resume mocks base method.
func (m *MockPipeline) Resume() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume")
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockPipelineMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPipeline)(nil).Resume))
}

// Stop mocks base method.
func (m *MockPipeline) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPipelineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPipeline)(nil).Stop))
}

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// GetPipeline mocks base method.
func (m *MockRunner) GetPipeline(id string) (Pipeline, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", id)
	ret0, _ := ret[0].(Pipeline)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockRunnerMockRecorder) GetPipeline(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockRunner)(nil).GetPipeline), id)
}

// StartPipeline mocks base method.
func (m *MockRunner) StartPipeline(ctx context.Context, pipeline ingester.Pipeline) (Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipeline", ctx, pipeline)
	ret0, _ := ret[0].(Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPipeline indicates an expected call of StartPipeline.
func (mr *MockRunnerMockRecorder) StartPipeline(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipeline", reflect.TypeOf((*MockRunner)(nil).StartPipeline), ctx, pipeline)
}
