// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination store_generated.go -package controller . Store
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	ingester "github.com/formancehq/stack/ee/ingester/internal"
	bunpaginate "github.com/formancehq/stack/libs/go-libs/bun/bunpaginate"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method.
func (m *MockStore) CreateConnector(ctx context.Context, connector ingester.Connector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", ctx, connector)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockStoreMockRecorder) CreateConnector(ctx, connector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockStore)(nil).CreateConnector), ctx, connector)
}

// CreatePipeline mocks base method.
func (m *MockStore) CreatePipeline(ctx context.Context, pipeline ingester.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockStoreMockRecorder) CreatePipeline(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockStore)(nil).CreatePipeline), ctx, pipeline)
}

// DeleteConnector mocks base method.
func (m *MockStore) DeleteConnector(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockStoreMockRecorder) DeleteConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockStore)(nil).DeleteConnector), ctx, id)
}

// DeletePipeline mocks base method.
func (m *MockStore) DeletePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockStoreMockRecorder) DeletePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockStore)(nil).DeletePipeline), ctx, id)
}

// GetConnector mocks base method.
func (m *MockStore) GetConnector(ctx context.Context, id string) (*ingester.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", ctx, id)
	ret0, _ := ret[0].(*ingester.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockStoreMockRecorder) GetConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockStore)(nil).GetConnector), ctx, id)
}

// GetPipeline mocks base method.
func (m *MockStore) GetPipeline(ctx context.Context, id string) (*ingester.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, id)
	ret0, _ := ret[0].(*ingester.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockStoreMockRecorder) GetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockStore)(nil).GetPipeline), ctx, id)
}

// ListConnectors mocks base method.
func (m *MockStore) ListConnectors(ctx context.Context) (*bunpaginate.Cursor[ingester.Connector], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ingester.Connector])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockStoreMockRecorder) ListConnectors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockStore)(nil).ListConnectors), ctx)
}

// ListPipelines mocks base method.
func (m *MockStore) ListPipelines(ctx context.Context) (*bunpaginate.Cursor[ingester.Pipeline], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ingester.Pipeline])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockStoreMockRecorder) ListPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockStore)(nil).ListPipelines), ctx)
}
