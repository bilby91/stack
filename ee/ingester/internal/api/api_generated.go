// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source api.go -destination api_generated.go -package api . Backend
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	ingester "github.com/formancehq/stack/ee/ingester/internal"
	bunpaginate "github.com/formancehq/stack/libs/go-libs/bun/bunpaginate"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method.
func (m *MockBackend) CreateConnector(ctx context.Context, configuration ingester.ConnectorConfiguration) (*ingester.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", ctx, configuration)
	ret0, _ := ret[0].(*ingester.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockBackendMockRecorder) CreateConnector(ctx, configuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockBackend)(nil).CreateConnector), ctx, configuration)
}

// CreatePipeline mocks base method.
func (m *MockBackend) CreatePipeline(ctx context.Context, pipelineConfiguration ingester.PipelineConfiguration) (*ingester.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipelineConfiguration)
	ret0, _ := ret[0].(*ingester.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockBackendMockRecorder) CreatePipeline(ctx, pipelineConfiguration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockBackend)(nil).CreatePipeline), ctx, pipelineConfiguration)
}

// DeleteConnector mocks base method.
func (m *MockBackend) DeleteConnector(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockBackendMockRecorder) DeleteConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockBackend)(nil).DeleteConnector), ctx, id)
}

// DeletePipeline mocks base method.
func (m *MockBackend) DeletePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockBackendMockRecorder) DeletePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockBackend)(nil).DeletePipeline), ctx, id)
}

// GetConnector mocks base method.
func (m *MockBackend) GetConnector(ctx context.Context, id string) (*ingester.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", ctx, id)
	ret0, _ := ret[0].(*ingester.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockBackendMockRecorder) GetConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockBackend)(nil).GetConnector), ctx, id)
}

// GetPipeline mocks base method.
func (m *MockBackend) GetPipeline(ctx context.Context, id string) (*ingester.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, id)
	ret0, _ := ret[0].(*ingester.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockBackendMockRecorder) GetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockBackend)(nil).GetPipeline), ctx, id)
}

// ListConnectors mocks base method.
func (m *MockBackend) ListConnectors(ctx context.Context) (*bunpaginate.Cursor[ingester.Connector], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ingester.Connector])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockBackendMockRecorder) ListConnectors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockBackend)(nil).ListConnectors), ctx)
}

// ListPipelines mocks base method.
func (m *MockBackend) ListPipelines(ctx context.Context) (*bunpaginate.Cursor[ingester.Pipeline], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ingester.Pipeline])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockBackendMockRecorder) ListPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockBackend)(nil).ListPipelines), ctx)
}

// PausePipeline mocks base method.
func (m *MockBackend) PausePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PausePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PausePipeline indicates an expected call of PausePipeline.
func (mr *MockBackendMockRecorder) PausePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PausePipeline", reflect.TypeOf((*MockBackend)(nil).PausePipeline), ctx, id)
}

// ResetPipeline mocks base method.
func (m *MockBackend) ResetPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPipeline indicates an expected call of ResetPipeline.
func (mr *MockBackendMockRecorder) ResetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPipeline", reflect.TypeOf((*MockBackend)(nil).ResetPipeline), ctx, id)
}

// ResumePipeline mocks base method.
func (m *MockBackend) ResumePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumePipeline indicates an expected call of ResumePipeline.
func (mr *MockBackendMockRecorder) ResumePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePipeline", reflect.TypeOf((*MockBackend)(nil).ResumePipeline), ctx, id)
}

// StartPipeline mocks base method.
func (m *MockBackend) StartPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPipeline indicates an expected call of StartPipeline.
func (mr *MockBackendMockRecorder) StartPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipeline", reflect.TypeOf((*MockBackend)(nil).StartPipeline), ctx, id)
}

// StopPipeline mocks base method.
func (m *MockBackend) StopPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPipeline indicates an expected call of StopPipeline.
func (mr *MockBackendMockRecorder) StopPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipeline", reflect.TypeOf((*MockBackend)(nil).StopPipeline), ctx, id)
}
