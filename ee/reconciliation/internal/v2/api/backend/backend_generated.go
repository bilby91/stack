// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	service "github.com/formancehq/reconciliation/internal/v2/api/service"
	models "github.com/formancehq/reconciliation/internal/v2/models"
	storage "github.com/formancehq/reconciliation/internal/v2/storage"
	bunpaginate "github.com/formancehq/stack/libs/go-libs/bun/bunpaginate"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreatePolicy mocks base method.
func (m *MockService) CreatePolicy(ctx context.Context, req *service.CreatePolicyRequest) (*models.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, req)
	ret0, _ := ret[0].(*models.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockServiceMockRecorder) CreatePolicy(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockService)(nil).CreatePolicy), ctx, req)
}

// CreateRule mocks base method.
func (m *MockService) CreateRule(ctx context.Context, req *service.CreateRuleRequest) (*models.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", ctx, req)
	ret0, _ := ret[0].(*models.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockServiceMockRecorder) CreateRule(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockService)(nil).CreateRule), ctx, req)
}

// DeletePolicy mocks base method.
func (m *MockService) DeletePolicy(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockServiceMockRecorder) DeletePolicy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockService)(nil).DeletePolicy), ctx, id)
}

// DeleteRule mocks base method.
func (m *MockService) DeleteRule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockServiceMockRecorder) DeleteRule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockService)(nil).DeleteRule), ctx, id)
}

// DisablePolicy mocks base method.
func (m *MockService) DisablePolicy(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePolicy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePolicy indicates an expected call of DisablePolicy.
func (mr *MockServiceMockRecorder) DisablePolicy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePolicy", reflect.TypeOf((*MockService)(nil).DisablePolicy), ctx, id)
}

// EnablePolicy mocks base method.
func (m *MockService) EnablePolicy(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePolicy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePolicy indicates an expected call of EnablePolicy.
func (mr *MockServiceMockRecorder) EnablePolicy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePolicy", reflect.TypeOf((*MockService)(nil).EnablePolicy), ctx, id)
}

// GetPolicy mocks base method.
func (m *MockService) GetPolicy(ctx context.Context, id string) (*models.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, id)
	ret0, _ := ret[0].(*models.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockServiceMockRecorder) GetPolicy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockService)(nil).GetPolicy), ctx, id)
}

// GetReconciliation mocks base method.
func (m *MockService) GetReconciliation(ctx context.Context, id string) (*models.Reconciliation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReconciliation", ctx, id)
	ret0, _ := ret[0].(*models.Reconciliation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReconciliation indicates an expected call of GetReconciliation.
func (mr *MockServiceMockRecorder) GetReconciliation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReconciliation", reflect.TypeOf((*MockService)(nil).GetReconciliation), ctx, id)
}

// GetRule mocks base method.
func (m *MockService) GetRule(ctx context.Context, id string) (*models.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ctx, id)
	ret0, _ := ret[0].(*models.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockServiceMockRecorder) GetRule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockService)(nil).GetRule), ctx, id)
}

// ListPolicies mocks base method.
func (m *MockService) ListPolicies(ctx context.Context, q storage.ListPoliciesQuery) (*bunpaginate.Cursor[models.Policy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", ctx, q)
	ret0, _ := ret[0].(*bunpaginate.Cursor[models.Policy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockServiceMockRecorder) ListPolicies(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockService)(nil).ListPolicies), ctx, q)
}

// ListReconciliations mocks base method.
func (m *MockService) ListReconciliations(ctx context.Context, q storage.ListReconciliationsQuery) (*bunpaginate.Cursor[models.Reconciliation], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReconciliations", ctx, q)
	ret0, _ := ret[0].(*bunpaginate.Cursor[models.Reconciliation])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReconciliations indicates an expected call of ListReconciliations.
func (mr *MockServiceMockRecorder) ListReconciliations(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReconciliations", reflect.TypeOf((*MockService)(nil).ListReconciliations), ctx, q)
}

// ListRules mocks base method.
func (m *MockService) ListRules(ctx context.Context, q storage.ListRulesQuery) (*bunpaginate.Cursor[models.Rule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", ctx, q)
	ret0, _ := ret[0].(*bunpaginate.Cursor[models.Rule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockServiceMockRecorder) ListRules(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockService)(nil).ListRules), ctx, q)
}

// UpdatePolicyRules mocks base method.
func (m *MockService) UpdatePolicyRules(ctx context.Context, id string, req *service.UpdatePolicyRulesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyRules", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicyRules indicates an expected call of UpdatePolicyRules.
func (mr *MockServiceMockRecorder) UpdatePolicyRules(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyRules", reflect.TypeOf((*MockService)(nil).UpdatePolicyRules), ctx, id, req)
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockBackend) GetService() Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(Service)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockBackendMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockBackend)(nil).GetService))
}
